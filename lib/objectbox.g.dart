// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/local/database/objectbox/model/object_box_user.dart';
import 'data/local/database/objectbox/model/object_box_user_authorization_data.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 4461467747026883837),
      name: 'ObjectBoxUser',
      lastPropertyId: const IdUid(5, 8633315416824548704),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4487787075157856590),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5737586196601803560),
            name: 'userId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8633315416824548704),
            name: 'authorizationDataId',
            type: 11,
            flags: 520,
            indexId: const IdUid(2, 1825204885330090749),
            relationTarget: 'ObjectBoxUserAuthorizationData')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 5580513946193585444),
      name: 'ObjectBoxUserAuthorizationData',
      lastPropertyId: const IdUid(3, 5318797060856227150),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4667319295108619967),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7057715297761615136),
            name: 'accessToken',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5318797060856227150),
            name: 'refreshToken',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 5580513946193585444),
      lastIndexId: const IdUid(2, 1825204885330090749),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [7163745484534489156, 8271335877614481830],
      retiredIndexUids: const [6970047395987467947],
      retiredPropertyUids: const [
        3812969659023192963,
        8969398750685921378,
        1045648510981454082,
        135479034938686090,
        8407047220043060734,
        1508306153113125613
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ObjectBoxUser: EntityDefinition<ObjectBoxUser>(
        model: _entities[0],
        toOneRelations: (ObjectBoxUser object) => [object.authorizationData],
        toManyRelations: (ObjectBoxUser object) => {},
        getId: (ObjectBoxUser object) => object.id,
        setId: (ObjectBoxUser object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectBoxUser object, fb.Builder fbb) {
          final userIdOffset =
              object.userId == null ? null : fbb.writeString(object.userId!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, userIdOffset);
          fbb.addInt64(4, object.authorizationData.targetId);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxUser(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              userId: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6));
          object.authorizationData.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.authorizationData.attach(store);
          return object;
        }),
    ObjectBoxUserAuthorizationData: EntityDefinition<
            ObjectBoxUserAuthorizationData>(
        model: _entities[1],
        toOneRelations: (ObjectBoxUserAuthorizationData object) => [],
        toManyRelations: (ObjectBoxUserAuthorizationData object) => {},
        getId: (ObjectBoxUserAuthorizationData object) => object.id,
        setId: (ObjectBoxUserAuthorizationData object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectBoxUserAuthorizationData object, fb.Builder fbb) {
          final accessTokenOffset = object.accessToken == null
              ? null
              : fbb.writeString(object.accessToken!);
          final refreshTokenOffset = object.refreshToken == null
              ? null
              : fbb.writeString(object.refreshToken!);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, accessTokenOffset);
          fbb.addOffset(2, refreshTokenOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxUserAuthorizationData(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              accessToken: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 6),
              refreshToken: const fb.StringReader(asciiOptimization: true)
                  .vTableGetNullable(buffer, rootOffset, 8));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ObjectBoxUser] entity fields to define ObjectBox queries.
class ObjectBoxUser_ {
  /// see [ObjectBoxUser.id]
  static final id =
      QueryIntegerProperty<ObjectBoxUser>(_entities[0].properties[0]);

  /// see [ObjectBoxUser.userId]
  static final userId =
      QueryStringProperty<ObjectBoxUser>(_entities[0].properties[1]);

  /// see [ObjectBoxUser.authorizationData]
  static final authorizationData =
      QueryRelationToOne<ObjectBoxUser, ObjectBoxUserAuthorizationData>(
          _entities[0].properties[2]);
}

/// [ObjectBoxUserAuthorizationData] entity fields to define ObjectBox queries.
class ObjectBoxUserAuthorizationData_ {
  /// see [ObjectBoxUserAuthorizationData.id]
  static final id = QueryIntegerProperty<ObjectBoxUserAuthorizationData>(
      _entities[1].properties[0]);

  /// see [ObjectBoxUserAuthorizationData.accessToken]
  static final accessToken =
      QueryStringProperty<ObjectBoxUserAuthorizationData>(
          _entities[1].properties[1]);

  /// see [ObjectBoxUserAuthorizationData.refreshToken]
  static final refreshToken =
      QueryStringProperty<ObjectBoxUserAuthorizationData>(
          _entities[1].properties[2]);
}
